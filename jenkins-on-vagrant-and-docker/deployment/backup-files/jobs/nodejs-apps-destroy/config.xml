<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3867.v535458ce43fd">
    <script>pipeline {
    agent any

    stages {
        stage(&apos;Destroy Nodejs Apps Terraform state&apos;) {
            steps {
                script {
                    dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/terraform&quot;) {
                        sh &apos;ls -l&apos;
                        
                        // Check if tf-cleanup.sh file exists before attempting to change permissions
                        if (fileExists(&apos;tf-cleanup.sh&apos;)) {
                            sh &apos;chmod +x tf-cleanup.sh&apos; // Ensure script is executable
                            sh &apos;./tf-cleanup.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: tf-cleanup.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }
                }
            }
        }
        
        stage(&apos;Remove saved Nodejs Apps Terraform state from S3 bucket&apos;) {
            steps {
                script {
                    dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/terraform&quot;) {
                        sh &apos;ls -l&apos;
                        
                        // Check if rm-nodejs-apps-tfstate-from-s3.sh file exists before attempting to change permissions
                        if (fileExists(&apos;rm-nodejs-apps-tfstate-from-s3.sh&apos;)) {
                            sh &apos;chmod +x rm-nodejs-apps-tfstate-from-s3.sh&apos; // Ensure script is executable
                            sh &apos;./rm-nodejs-apps-tfstate-from-s3.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: rm-nodejs-apps-tfstate-from-s3.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }
                }
            }
        }

        stage(&apos;Remove saved S3 Setup Bucket state from S3 bucket&apos;) {
            steps {
                script {
                    dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                        sh &apos;ls -l&apos;
                        
                       // Check if remove_s3_bucket.sh file exists before attempting to change permissions
                        if (fileExists(&apos;remove_s3_bucket.sh&apos;)) {
                            sh &apos;chmod +x remove_s3_bucket.sh&apos; // Ensure script is executable
                            sh &apos;./remove_s3_bucket.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: remove_s3_bucket.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }
                }
            }
        }
        
        stage(&apos;Destroy S3 Setup Terraform state&apos;) {
    steps {
        script {
            dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                sh &apos;ls -l&apos;
                
                // Initialize Terraform
                sh &apos;terraform init&apos;

                // Destroy infrastructure with auto-approval
                sh &apos;terraform destroy -auto-approve || true&apos;

                // Clean up Terraform-related files
                echo &quot;Removing Terraform-related files...&quot;
                sh &apos;rm -f terraform.tfstate terraform.tfstate.backup .terraform.lock.hcl tfplan terraform.tfplan&apos;
                sh &apos;rm -rf .terraform/&apos;
            }
        }
    }
}

        
       stage(&apos;Destroy S3 bucket&apos;) {
    steps {
        script {
            dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                def bucketName = sh(script: &quot;grep -E &apos;resource \&quot;aws_s3_bucket\&quot; \&quot;nodejs_apps_bucket\&quot;&apos; main.tf -A 2 | grep \&quot;bucket =\&quot; | awk -F &apos;\&quot;&apos; &apos;{print \$2}&apos;&quot;, 
                                    returnStdout: true).trim()

                if (bucketName) {
                    sh &quot;aws s3api delete-bucket --bucket $bucketName&quot;
                } else {
                    echo &quot;Error: Unable to extract bucket name from main.tf.&quot;
                    error(&quot;Unable to extract bucket name from main.tf.&quot;)
                }
            }
        }
    }
}

        
        stage(&apos;Clean Up &quot;nodejs-apps-deploy&quot; project&apos;) {
            steps {
                dir(&quot;../nodejs-apps-deploy&quot;) {
                    deleteDir()
                }
                dir(&quot;../nodejs-apps-deploy@tmp&quot;) {
                    deleteDir()
                }
            }
        }
        
        stage(&apos;Clean Up &quot;nodejs-apps-destroy&quot; project&apos;) {
            steps {
                dir(&quot;../nodejs-apps-destroy&quot;) {
                    deleteDir()
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>