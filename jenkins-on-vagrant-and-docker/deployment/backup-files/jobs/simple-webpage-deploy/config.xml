<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>1</daysToKeep>
        <numToKeep>1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3867.v535458ce43fd">
    <script>pipeline {
    agent any

    stages {
        stage(&apos;Clone Github Repository&apos;) {
            steps {
                deleteDir()
                sh &apos;ssh-keyscan -H github.com &gt;&gt; $HOME/.ssh/known_hosts&apos;
                git branch: &apos;main&apos;,
                    credentialsId: &apos;Github&apos;,
                    url: &apos;git@github.com:developer-vs/devops.git&apos;
            }
        }
        
        stage(&apos;Check Terraform&apos;) {
            steps {
                sh &apos;terraform --version&apos;
            }
        }
        
        stage(&apos;Terraform Plan&apos;) {
            steps {
                script {
                    dir(&quot;$WORKSPACE/simple-webpage/terraform&quot;) {
                        sh &apos;terraform init&apos;
                        sh &apos;terraform plan -out=terraform.tfplan&apos;
                    }
                }
            }
        }
        
        stage(&apos;Plan verification and user input&apos;) {
            steps {
                input(
                    message: &apos;Proceed or abort?&apos;, 
                    ok: &apos;ok&apos;
                )
            }
        }
        
        stage(&apos;Terraform Apply&apos;) {
            steps {
                script {
                    dir(&quot;$WORKSPACE/simple-webpage/terraform&quot;) {
                        sh &apos;terraform apply terraform.tfplan&apos;
                    }
                }
            }
        }
        
        stage(&apos;Get IP Address&apos;) {
            steps {
                script {
                    dir(&quot;$WORKSPACE/simple-webpage/terraform&quot;) {
                        sh &apos;terraform output web_address &gt; $WORKSPACE/simple-webpage/ansible/instance_ip.txt&apos;
                        def fileContent = readFile(&quot;$WORKSPACE/simple-webpage/ansible/instance_ip.txt&quot;).trim()
                        echo &quot;IP address: $fileContent&quot;
                    }
                }
            }
        }

        stage(&apos;Check Ansible&apos;) {
            steps {
                sh &apos;ansible --version&apos;
            }
        }
        
        stage(&apos;Ansible Playbook verification and user input&apos;) {
            steps {
                input(
                    message: &apos;Proceed or abort?&apos;, 
                    ok: &apos;ok&apos;
                )
            }
        }
        
        stage(&apos;Ansible Playbook Apply&apos;) {
            steps {
                script {
                    dir(&quot;$WORKSPACE/simple-webpage/scripts&quot;) {
                        sh &apos;ls -l&apos; // List files in the directory for debugging
                        sh &apos;chmod +x run_playbook.sh&apos; // Ensure script is executable
                        sh &apos;./run_playbook.sh&apos; // Execute the script
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>