<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>vlad</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@704.vc58b_8890a_384">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618">
      <stagesUUID>7d712f7d-9a5d-451a-9456-3c5076953011</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2175.v76a_fff0a_2618">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Destroy Nodejs Apps Terraform state</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/terraform&quot;) {
                        sh &apos;ls -l&apos;
                        
                        // Check if tf-cleanup.sh file exists before attempting to change permissions
                        if (fileExists(&apos;tf-cleanup.sh&apos;)) {
                            sh &apos;chmod +x tf-cleanup.sh&apos; // Ensure script is executable
                            sh &apos;./tf-cleanup.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: tf-cleanup.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Remove saved Nodejs Apps Terraform state from S3 bucket</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/terraform&quot;) {
                        sh &apos;ls -l&apos;
                        
                        // Check if rm-nodejs-apps-tfstate-from-s3.sh file exists before attempting to change permissions
                        if (fileExists(&apos;rm-nodejs-apps-tfstate-from-s3.sh&apos;)) {
                            sh &apos;chmod +x rm-nodejs-apps-tfstate-from-s3.sh&apos; // Ensure script is executable
                            sh &apos;./rm-nodejs-apps-tfstate-from-s3.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: rm-nodejs-apps-tfstate-from-s3.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Remove saved S3 Setup Bucket state from S3 bucket</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                        sh &apos;ls -l&apos;
                        
                       // Check if remove_s3_bucket.sh file exists before attempting to change permissions
                        if (fileExists(&apos;remove_s3_bucket.sh&apos;)) {
                            sh &apos;chmod +x remove_s3_bucket.sh&apos; // Ensure script is executable
                            sh &apos;./remove_s3_bucket.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: remove_s3_bucket.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Destroy S3 Setup Terraform state</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                sh &apos;ls -l&apos;
                
                // Initialize Terraform
                sh &apos;terraform init&apos;

                // Destroy infrastructure with auto-approval
                sh &apos;terraform destroy -auto-approve || true&apos;

                // Clean up Terraform-related files
                echo &quot;Removing Terraform-related files...&quot;
                sh &apos;rm -f terraform.tfstate terraform.tfstate.backup .terraform.lock.hcl tfplan terraform.tfplan&apos;
                sh &apos;rm -rf .terraform/&apos;
            }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Destroy S3 bucket</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                def bucketName = sh(script: &quot;grep -E &apos;resource \&quot;aws_s3_bucket\&quot; \&quot;nodejs_apps_bucket\&quot;&apos; main.tf -A 2 | grep \&quot;bucket =\&quot; | awk -F &apos;\&quot;&apos; &apos;{print \$2}&apos;&quot;, 
                                    returnStdout: true).trim()

                if (bucketName) {
                    sh &quot;aws s3api delete-bucket --bucket $bucketName&quot;
                } else {
                    echo &quot;Error: Unable to extract bucket name from main.tf.&quot;
                    error(&quot;Unable to extract bucket name from main.tf.&quot;)
                }
            }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Clean Up &quot;nodejs-apps-deploy&quot; project</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTreeStep>
                        <name>dir</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTSingleArgument">
                          <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                            <value class="string">../nodejs-apps-deploy</value>
                          </value>
                        </args>
                        <children>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                            <name>deleteDir</name>
                            <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                              <arguments class="linked-hash-map"/>
                            </args>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        </children>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTreeStep>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTreeStep>
                        <name>dir</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTSingleArgument">
                          <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                            <value class="string">../nodejs-apps-deploy@tmp</value>
                          </value>
                        </args>
                        <children>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                            <name>deleteDir</name>
                            <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                              <arguments class="linked-hash-map"/>
                            </args>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        </children>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTreeStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Clean Up &quot;nodejs-apps-destroy&quot; project</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTreeStep>
                        <name>dir</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTSingleArgument">
                          <value class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue$ConstantValue">
                            <value class="string">../nodejs-apps-destroy</value>
                          </value>
                        </args>
                        <children>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                            <name>deleteDir</name>
                            <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                              <arguments class="linked-hash-map"/>
                            </args>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        </children>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTTreeStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>7d712f7d-9a5d-451a-9456-3c5076953011</uuid>
          </stages>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
  </actions>
  <queueId>100</queueId>
  <timestamp>1710048154234</timestamp>
  <startTime>1710048154242</startTime>
  <result>SUCCESS</result>
  <duration>140203</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>pipeline {
    agent any

    stages {
        stage(&apos;Destroy Nodejs Apps Terraform state&apos;) {
            steps {
                script {
                    dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/terraform&quot;) {
                        sh &apos;ls -l&apos;
                        
                        // Check if tf-cleanup.sh file exists before attempting to change permissions
                        if (fileExists(&apos;tf-cleanup.sh&apos;)) {
                            sh &apos;chmod +x tf-cleanup.sh&apos; // Ensure script is executable
                            sh &apos;./tf-cleanup.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: tf-cleanup.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }
                }
            }
        }
        
        stage(&apos;Remove saved Nodejs Apps Terraform state from S3 bucket&apos;) {
            steps {
                script {
                    dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/terraform&quot;) {
                        sh &apos;ls -l&apos;
                        
                        // Check if rm-nodejs-apps-tfstate-from-s3.sh file exists before attempting to change permissions
                        if (fileExists(&apos;rm-nodejs-apps-tfstate-from-s3.sh&apos;)) {
                            sh &apos;chmod +x rm-nodejs-apps-tfstate-from-s3.sh&apos; // Ensure script is executable
                            sh &apos;./rm-nodejs-apps-tfstate-from-s3.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: rm-nodejs-apps-tfstate-from-s3.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }
                }
            }
        }

        stage(&apos;Remove saved S3 Setup Bucket state from S3 bucket&apos;) {
            steps {
                script {
                    dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                        sh &apos;ls -l&apos;
                        
                       // Check if remove_s3_bucket.sh file exists before attempting to change permissions
                        if (fileExists(&apos;remove_s3_bucket.sh&apos;)) {
                            sh &apos;chmod +x remove_s3_bucket.sh&apos; // Ensure script is executable
                            sh &apos;./remove_s3_bucket.sh&apos; // Execute the script
                        } else {
                            echo &quot;Error: remove_s3_bucket.sh file not found.&quot;
                            // You can choose to exit the stage here or handle the error accordingly
                            exit 0
                        }
                    }
                }
            }
        }
        
        stage(&apos;Destroy S3 Setup Terraform state&apos;) {
    steps {
        script {
            dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                sh &apos;ls -l&apos;
                
                // Initialize Terraform
                sh &apos;terraform init&apos;

                // Destroy infrastructure with auto-approval
                sh &apos;terraform destroy -auto-approve || true&apos;

                // Clean up Terraform-related files
                echo &quot;Removing Terraform-related files...&quot;
                sh &apos;rm -f terraform.tfstate terraform.tfstate.backup .terraform.lock.hcl tfplan terraform.tfplan&apos;
                sh &apos;rm -rf .terraform/&apos;
            }
        }
    }
}

        
       stage(&apos;Destroy S3 bucket&apos;) {
    steps {
        script {
            dir(&quot;../nodejs-apps-deploy/nodejs-apps-2/project-setup-files/setup-s3-bucket&quot;) {
                def bucketName = sh(script: &quot;grep -E &apos;resource \&quot;aws_s3_bucket\&quot; \&quot;nodejs_apps_bucket\&quot;&apos; main.tf -A 2 | grep \&quot;bucket =\&quot; | awk -F &apos;\&quot;&apos; &apos;{print \$2}&apos;&quot;, 
                                    returnStdout: true).trim()

                if (bucketName) {
                    sh &quot;aws s3api delete-bucket --bucket $bucketName&quot;
                } else {
                    echo &quot;Error: Unable to extract bucket name from main.tf.&quot;
                    error(&quot;Unable to extract bucket name from main.tf.&quot;)
                }
            }
        }
    }
}

        
        stage(&apos;Clean Up &quot;nodejs-apps-deploy&quot; project&apos;) {
            steps {
                dir(&quot;../nodejs-apps-deploy&quot;) {
                    deleteDir()
                }
                dir(&quot;../nodejs-apps-deploy@tmp&quot;) {
                    deleteDir()
                }
            }
        }
        
        stage(&apos;Clean Up &quot;nodejs-apps-destroy&quot; project&apos;) {
            steps {
                dir(&quot;../nodejs-apps-destroy&quot;) {
                    deleteDir()
                }
            }
        }
    }
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>409954729</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>134610056</long>
      </entry>
      <entry>
        <string>run</string>
        <long>2138953864</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>38500699</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>1138100455</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.createStepsBlock</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.getRestartedStage</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.updateJobProperties</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.updateRunAndJobActions</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.getScript</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.hasScmContext</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.isDoCheckout</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.reuseRootAgent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.getDeclarativeAgent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.hasAgent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.populateMap</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.rawClosure</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.agent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.astUUID</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.environment</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.getEnvVars</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.hasSatisfiedConditions</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.libraries</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.options</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.parameters</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.post</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.stages</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.tools</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.triggers</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.agent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.environment</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.getEnvVars</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.getMatrixCellEnvVars</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.input</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.name</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.options</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.parallel</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.post</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.stages</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.steps</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.tools</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.when</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stages.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stages.stages</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.StepsBlock.closure</string>
      <string>org.jenkinsci.plugins.workflow.cps.persistence.IteratorHack$Itr.hasNext</string>
      <string>org.jenkinsci.plugins.workflow.cps.persistence.IteratorHack$Itr.next</string>
      <string>org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper.result</string>
    </internalCalls>
    <sandbox>true</sandbox>
    <iota>110</iota>
    <head>1:110</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
    <storageDir>workflow-completed</storageDir>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>