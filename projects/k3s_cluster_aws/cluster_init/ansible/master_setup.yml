- name: Launch Master Node
  hosts: master_public
  become: true
    
  tasks:
    - name: Read master IP from hosts.ini
      shell: "awk '/^\\[master_public\\]/{getline; print}' hosts.ini | cut -d ' ' -f 1"
      register: master_ip_result

    - set_fact:
        master_ip_public: "{{ master_ip_result.stdout.strip() }}"
        
    - name: Check if K3s service is running
      command: systemctl is-active k3s
      register: k3s_service_status
      ignore_errors: true  # Ignore errors if the command fails
      
    - name: Stop K3s service if running
      systemd:
        name: k3s
        state: stopped
      when: k3s_service_status.stdout == "active"  # Only stop if the service is active
      
    - name: Delete K3s data directory # K3s server failed to start due to an issue with the bootstrap data, which appears to be already found and encrypted with a different token
      file:
        path: /var/lib/rancher/k3s
        state: absent

    - name: Generate K3s token
      shell: openssl rand -hex 16
      register: k3s_token_result
      changed_when: false

    - set_fact:
        k3s_token: "{{ k3s_token_result.stdout }}"
    
    - name: Save K3s token
      copy:
        content: "{{ k3s_token }}"
        dest: k3s_token.txt

    - name: Update apt and install dependencies
      apt:
        update_cache: yes
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common

    - name: Download K3s binary
      get_url:
        url: "https://github.com/k3s-io/k3s/releases/latest/download/k3s"
        dest: "/tmp/k3s"
        mode: '0755'

    - name: Install and configure K3s master node
      command: >
        /tmp/k3s server
        --disable=traefik,servicelb
        --tls-san={{ master_ip_public }}
        --token={{ k3s_token }}
      args:
        creates: "/etc/systemd/system/k3s.service"

    - name: Show kubeconfig in the terminal
      become: true
      shell: cat /etc/rancher/k3s/k3s.yaml
      register: kubeconfig_content

    - name: Print kubeconfig content
      debug:
        msg: "{{ kubeconfig_content.stdout }}"

